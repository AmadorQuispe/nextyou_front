/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as protectedDashboardImport } from './routes/(protected)/_dashboard'
import { Route as authLoginIndexImport } from './routes/(auth)/login/index'
import { Route as protectedDashboardQuestionnaireIndexImport } from './routes/(protected)/_dashboard/questionnaire/index'
import { Route as protectedDashboardJournalIndexImport } from './routes/(protected)/_dashboard/journal/index'
import { Route as protectedDashboardHomeIndexImport } from './routes/(protected)/_dashboard/home/index'
import { Route as protectedDashboardChatIndexImport } from './routes/(protected)/_dashboard/chat/index'

// Create Virtual Routes

const protectedImport = createFileRoute('/(protected)')()

// Create/Update Routes

const protectedRoute = protectedImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const protectedDashboardRoute = protectedDashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => protectedRoute,
} as any)

const authLoginIndexRoute = authLoginIndexImport.update({
  id: '/(auth)/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const protectedDashboardQuestionnaireIndexRoute =
  protectedDashboardQuestionnaireIndexImport.update({
    id: '/questionnaire/',
    path: '/questionnaire/',
    getParentRoute: () => protectedDashboardRoute,
  } as any)

const protectedDashboardJournalIndexRoute =
  protectedDashboardJournalIndexImport.update({
    id: '/journal/',
    path: '/journal/',
    getParentRoute: () => protectedDashboardRoute,
  } as any)

const protectedDashboardHomeIndexRoute =
  protectedDashboardHomeIndexImport.update({
    id: '/home/',
    path: '/home/',
    getParentRoute: () => protectedDashboardRoute,
  } as any)

const protectedDashboardChatIndexRoute =
  protectedDashboardChatIndexImport.update({
    id: '/chat/',
    path: '/chat/',
    getParentRoute: () => protectedDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/_dashboard': {
      id: '/(protected)/_dashboard'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedDashboardImport
      parentRoute: typeof protectedRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/_dashboard/chat/': {
      id: '/(protected)/_dashboard/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof protectedDashboardChatIndexImport
      parentRoute: typeof protectedDashboardImport
    }
    '/(protected)/_dashboard/home/': {
      id: '/(protected)/_dashboard/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof protectedDashboardHomeIndexImport
      parentRoute: typeof protectedDashboardImport
    }
    '/(protected)/_dashboard/journal/': {
      id: '/(protected)/_dashboard/journal/'
      path: '/journal'
      fullPath: '/journal'
      preLoaderRoute: typeof protectedDashboardJournalIndexImport
      parentRoute: typeof protectedDashboardImport
    }
    '/(protected)/_dashboard/questionnaire/': {
      id: '/(protected)/_dashboard/questionnaire/'
      path: '/questionnaire'
      fullPath: '/questionnaire'
      preLoaderRoute: typeof protectedDashboardQuestionnaireIndexImport
      parentRoute: typeof protectedDashboardImport
    }
  }
}

// Create and export the route tree

interface protectedDashboardRouteChildren {
  protectedDashboardChatIndexRoute: typeof protectedDashboardChatIndexRoute
  protectedDashboardHomeIndexRoute: typeof protectedDashboardHomeIndexRoute
  protectedDashboardJournalIndexRoute: typeof protectedDashboardJournalIndexRoute
  protectedDashboardQuestionnaireIndexRoute: typeof protectedDashboardQuestionnaireIndexRoute
}

const protectedDashboardRouteChildren: protectedDashboardRouteChildren = {
  protectedDashboardChatIndexRoute: protectedDashboardChatIndexRoute,
  protectedDashboardHomeIndexRoute: protectedDashboardHomeIndexRoute,
  protectedDashboardJournalIndexRoute: protectedDashboardJournalIndexRoute,
  protectedDashboardQuestionnaireIndexRoute:
    protectedDashboardQuestionnaireIndexRoute,
}

const protectedDashboardRouteWithChildren =
  protectedDashboardRoute._addFileChildren(protectedDashboardRouteChildren)

interface protectedRouteChildren {
  protectedDashboardRoute: typeof protectedDashboardRouteWithChildren
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedDashboardRoute: protectedDashboardRouteWithChildren,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof protectedDashboardRouteWithChildren
  '/login': typeof authLoginIndexRoute
  '/chat': typeof protectedDashboardChatIndexRoute
  '/home': typeof protectedDashboardHomeIndexRoute
  '/journal': typeof protectedDashboardJournalIndexRoute
  '/questionnaire': typeof protectedDashboardQuestionnaireIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof protectedDashboardRouteWithChildren
  '/login': typeof authLoginIndexRoute
  '/chat': typeof protectedDashboardChatIndexRoute
  '/home': typeof protectedDashboardHomeIndexRoute
  '/journal': typeof protectedDashboardJournalIndexRoute
  '/questionnaire': typeof protectedDashboardQuestionnaireIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(protected)': typeof protectedRouteWithChildren
  '/(protected)/_dashboard': typeof protectedDashboardRouteWithChildren
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(protected)/_dashboard/chat/': typeof protectedDashboardChatIndexRoute
  '/(protected)/_dashboard/home/': typeof protectedDashboardHomeIndexRoute
  '/(protected)/_dashboard/journal/': typeof protectedDashboardJournalIndexRoute
  '/(protected)/_dashboard/questionnaire/': typeof protectedDashboardQuestionnaireIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/chat' | '/home' | '/journal' | '/questionnaire'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/chat' | '/home' | '/journal' | '/questionnaire'
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(protected)/_dashboard'
    | '/(auth)/login/'
    | '/(protected)/_dashboard/chat/'
    | '/(protected)/_dashboard/home/'
    | '/(protected)/_dashboard/journal/'
    | '/(protected)/_dashboard/questionnaire/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  protectedRoute: typeof protectedRouteWithChildren
  authLoginIndexRoute: typeof authLoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  protectedRoute: protectedRouteWithChildren,
  authLoginIndexRoute: authLoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(protected)",
        "/(auth)/login/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(protected)": {
      "filePath": "(protected)",
      "children": [
        "/(protected)/_dashboard"
      ]
    },
    "/(protected)/_dashboard": {
      "filePath": "(protected)/_dashboard.tsx",
      "parent": "/(protected)",
      "children": [
        "/(protected)/_dashboard/chat/",
        "/(protected)/_dashboard/home/",
        "/(protected)/_dashboard/journal/",
        "/(protected)/_dashboard/questionnaire/"
      ]
    },
    "/(auth)/login/": {
      "filePath": "(auth)/login/index.tsx"
    },
    "/(protected)/_dashboard/chat/": {
      "filePath": "(protected)/_dashboard/chat/index.tsx",
      "parent": "/(protected)/_dashboard"
    },
    "/(protected)/_dashboard/home/": {
      "filePath": "(protected)/_dashboard/home/index.tsx",
      "parent": "/(protected)/_dashboard"
    },
    "/(protected)/_dashboard/journal/": {
      "filePath": "(protected)/_dashboard/journal/index.tsx",
      "parent": "/(protected)/_dashboard"
    },
    "/(protected)/_dashboard/questionnaire/": {
      "filePath": "(protected)/_dashboard/questionnaire/index.tsx",
      "parent": "/(protected)/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
